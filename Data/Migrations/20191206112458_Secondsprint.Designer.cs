// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(CinemarxContext))]
    [Migration("20191206112458_Secondsprint")]
    partial class Secondsprint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entity.CinemaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Caption")
                        .IsRequired();

                    b.Property<int?>("CinemaNetworkId")
                        .IsRequired();

                    b.Property<int>("City");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("CinemaNetworkId");

                    b.ToTable("CinemaEntity");
                });

            modelBuilder.Entity("Domain.Entity.CinemaNetworkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("WebSite")
                        .IsUnique()
                        .HasFilter("[WebSite] IS NOT NULL");

                    b.ToTable("CinemaNetworkEntity");
                });

            modelBuilder.Entity("Domain.Entity.FilmEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeRate");

                    b.Property<string>("Caption")
                        .IsRequired();

                    b.Property<int>("Duration");

                    b.Property<DateTime?>("PremiereDate");

                    b.HasKey("Id");

                    b.ToTable("FilmEntity");
                });

            modelBuilder.Entity("Domain.Entity.FilmInCinemaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CinemaId")
                        .IsRequired();

                    b.Property<DateTime>("DateOfEnd");

                    b.Property<DateTime>("DateOfStart");

                    b.Property<int?>("FilmId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmInCinemaEntity");
                });

            modelBuilder.Entity("Domain.Entity.HallEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .IsRequired();

                    b.Property<int?>("CinemaId")
                        .IsRequired();

                    b.Property<int>("ScreenType");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.ToTable("HallEntity");
                });

            modelBuilder.Entity("Domain.Entity.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("PersonEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1999, 12, 6, 13, 24, 58, 80, DateTimeKind.Local).AddTicks(4063),
                            Email = "smithbob@gmail.com",
                            IsAdmin = false,
                            Name = "Bob",
                            Password = "00000",
                            RegistrationDate = new DateTime(2019, 12, 6, 13, 24, 58, 82, DateTimeKind.Local).AddTicks(526),
                            Surname = "Smith"
                        });
                });

            modelBuilder.Entity("Domain.Entity.PlaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Class");

                    b.Property<int?>("HallId")
                        .IsRequired();

                    b.Property<int>("PlaceLine");

                    b.Property<int>("PlaceNumber");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("PlaceEntity");
                });

            modelBuilder.Entity("Domain.Entity.SessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BaseTicketPrice");

                    b.Property<DateTime>("DateAndTime");

                    b.Property<int?>("FilmInCinemaId")
                        .IsRequired();

                    b.Property<int?>("HallId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FilmInCinemaId");

                    b.HasIndex("HallId");

                    b.ToTable("SessionEntity");
                });

            modelBuilder.Entity("Domain.Entity.TicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("PersonId")
                        .IsRequired();

                    b.Property<int?>("PlaceId")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<DateTime>("PurchasedDate");

                    b.Property<DateTime?>("RevertedDate");

                    b.Property<int?>("SessionId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SessionId");

                    b.ToTable("TicketEntity");
                });

            modelBuilder.Entity("Domain.Entity.CinemaEntity", b =>
                {
                    b.HasOne("Domain.Entity.CinemaNetworkEntity", "CinemaNetwork")
                        .WithMany("Cinemas")
                        .HasForeignKey("CinemaNetworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.FilmInCinemaEntity", b =>
                {
                    b.HasOne("Domain.Entity.CinemaEntity", "Cinema")
                        .WithMany("FilmInCinemas")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.FilmEntity", "Film")
                        .WithMany("FilmInCinemas")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.HallEntity", b =>
                {
                    b.HasOne("Domain.Entity.CinemaEntity", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.PlaceEntity", b =>
                {
                    b.HasOne("Domain.Entity.HallEntity", "Hall")
                        .WithMany("Places")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.SessionEntity", b =>
                {
                    b.HasOne("Domain.Entity.FilmInCinemaEntity", "FilmInCinema")
                        .WithMany("Sessions")
                        .HasForeignKey("FilmInCinemaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.HallEntity", "Hall")
                        .WithMany("Sessions")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.TicketEntity", b =>
                {
                    b.HasOne("Domain.Entity.PersonEntity", "Person")
                        .WithMany("Tickets")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.PlaceEntity", "Place")
                        .WithMany("Tickets")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.SessionEntity", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
